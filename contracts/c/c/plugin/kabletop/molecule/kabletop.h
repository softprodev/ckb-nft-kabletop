// Generated by Molecule 0.7.0

#define MOLECULEC_VERSION 7000
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef KABLETOP_H
#define KABLETOP_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_KABLETOP
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * Reader APIs
 */

#define                                 MolReader_uint8_t_verify(s, c)                  mol_verify_fixed_size(s, 1)
#define                                 MolReader_uint8_t_get_nth0(s)                   mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_uint16_t_verify(s, c)                 mol_verify_fixed_size(s, 2)
#define                                 MolReader_uint16_t_get_nth0(s)                  mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_uint16_t_get_nth1(s)                  mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_uint64_t_verify(s, c)                 mol_verify_fixed_size(s, 8)
#define                                 MolReader_uint64_t_get_nth0(s)                  mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_uint64_t_get_nth1(s)                  mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_uint64_t_get_nth2(s)                  mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_uint64_t_get_nth3(s)                  mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_uint64_t_get_nth4(s)                  mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_uint64_t_get_nth5(s)                  mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_uint64_t_get_nth6(s)                  mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_uint64_t_get_nth7(s)                  mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_blake160_verify(s, c)                 mol_verify_fixed_size(s, 20)
#define                                 MolReader_blake160_get_nth0(s)                  mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_blake160_get_nth1(s)                  mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_blake160_get_nth2(s)                  mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_blake160_get_nth3(s)                  mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_blake160_get_nth4(s)                  mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_blake160_get_nth5(s)                  mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_blake160_get_nth6(s)                  mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_blake160_get_nth7(s)                  mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_blake160_get_nth8(s)                  mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_blake160_get_nth9(s)                  mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_blake160_get_nth10(s)                 mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_blake160_get_nth11(s)                 mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_blake160_get_nth12(s)                 mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_blake160_get_nth13(s)                 mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_blake160_get_nth14(s)                 mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_blake160_get_nth15(s)                 mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_blake160_get_nth16(s)                 mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_blake160_get_nth17(s)                 mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_blake160_get_nth18(s)                 mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_blake160_get_nth19(s)                 mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_blake256_verify(s, c)                 mol_verify_fixed_size(s, 32)
#define                                 MolReader_blake256_get_nth0(s)                  mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_blake256_get_nth1(s)                  mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_blake256_get_nth2(s)                  mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_blake256_get_nth3(s)                  mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_blake256_get_nth4(s)                  mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_blake256_get_nth5(s)                  mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_blake256_get_nth6(s)                  mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_blake256_get_nth7(s)                  mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_blake256_get_nth8(s)                  mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_blake256_get_nth9(s)                  mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_blake256_get_nth10(s)                 mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_blake256_get_nth11(s)                 mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_blake256_get_nth12(s)                 mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_blake256_get_nth13(s)                 mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_blake256_get_nth14(s)                 mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_blake256_get_nth15(s)                 mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_blake256_get_nth16(s)                 mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_blake256_get_nth17(s)                 mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_blake256_get_nth18(s)                 mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_blake256_get_nth19(s)                 mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_blake256_get_nth20(s)                 mol_slice_by_offset(s, 20, 1)
#define                                 MolReader_blake256_get_nth21(s)                 mol_slice_by_offset(s, 21, 1)
#define                                 MolReader_blake256_get_nth22(s)                 mol_slice_by_offset(s, 22, 1)
#define                                 MolReader_blake256_get_nth23(s)                 mol_slice_by_offset(s, 23, 1)
#define                                 MolReader_blake256_get_nth24(s)                 mol_slice_by_offset(s, 24, 1)
#define                                 MolReader_blake256_get_nth25(s)                 mol_slice_by_offset(s, 25, 1)
#define                                 MolReader_blake256_get_nth26(s)                 mol_slice_by_offset(s, 26, 1)
#define                                 MolReader_blake256_get_nth27(s)                 mol_slice_by_offset(s, 27, 1)
#define                                 MolReader_blake256_get_nth28(s)                 mol_slice_by_offset(s, 28, 1)
#define                                 MolReader_blake256_get_nth29(s)                 mol_slice_by_offset(s, 29, 1)
#define                                 MolReader_blake256_get_nth30(s)                 mol_slice_by_offset(s, 30, 1)
#define                                 MolReader_blake256_get_nth31(s)                 mol_slice_by_offset(s, 31, 1)
#define                                 MolReader_witness_verify(s, c)                  mol_verify_fixed_size(s, 65)
#define                                 MolReader_witness_get_nth0(s)                   mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_witness_get_nth1(s)                   mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_witness_get_nth2(s)                   mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_witness_get_nth3(s)                   mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_witness_get_nth4(s)                   mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_witness_get_nth5(s)                   mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_witness_get_nth6(s)                   mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_witness_get_nth7(s)                   mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_witness_get_nth8(s)                   mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_witness_get_nth9(s)                   mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_witness_get_nth10(s)                  mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_witness_get_nth11(s)                  mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_witness_get_nth12(s)                  mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_witness_get_nth13(s)                  mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_witness_get_nth14(s)                  mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_witness_get_nth15(s)                  mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_witness_get_nth16(s)                  mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_witness_get_nth17(s)                  mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_witness_get_nth18(s)                  mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_witness_get_nth19(s)                  mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_witness_get_nth20(s)                  mol_slice_by_offset(s, 20, 1)
#define                                 MolReader_witness_get_nth21(s)                  mol_slice_by_offset(s, 21, 1)
#define                                 MolReader_witness_get_nth22(s)                  mol_slice_by_offset(s, 22, 1)
#define                                 MolReader_witness_get_nth23(s)                  mol_slice_by_offset(s, 23, 1)
#define                                 MolReader_witness_get_nth24(s)                  mol_slice_by_offset(s, 24, 1)
#define                                 MolReader_witness_get_nth25(s)                  mol_slice_by_offset(s, 25, 1)
#define                                 MolReader_witness_get_nth26(s)                  mol_slice_by_offset(s, 26, 1)
#define                                 MolReader_witness_get_nth27(s)                  mol_slice_by_offset(s, 27, 1)
#define                                 MolReader_witness_get_nth28(s)                  mol_slice_by_offset(s, 28, 1)
#define                                 MolReader_witness_get_nth29(s)                  mol_slice_by_offset(s, 29, 1)
#define                                 MolReader_witness_get_nth30(s)                  mol_slice_by_offset(s, 30, 1)
#define                                 MolReader_witness_get_nth31(s)                  mol_slice_by_offset(s, 31, 1)
#define                                 MolReader_witness_get_nth32(s)                  mol_slice_by_offset(s, 32, 1)
#define                                 MolReader_witness_get_nth33(s)                  mol_slice_by_offset(s, 33, 1)
#define                                 MolReader_witness_get_nth34(s)                  mol_slice_by_offset(s, 34, 1)
#define                                 MolReader_witness_get_nth35(s)                  mol_slice_by_offset(s, 35, 1)
#define                                 MolReader_witness_get_nth36(s)                  mol_slice_by_offset(s, 36, 1)
#define                                 MolReader_witness_get_nth37(s)                  mol_slice_by_offset(s, 37, 1)
#define                                 MolReader_witness_get_nth38(s)                  mol_slice_by_offset(s, 38, 1)
#define                                 MolReader_witness_get_nth39(s)                  mol_slice_by_offset(s, 39, 1)
#define                                 MolReader_witness_get_nth40(s)                  mol_slice_by_offset(s, 40, 1)
#define                                 MolReader_witness_get_nth41(s)                  mol_slice_by_offset(s, 41, 1)
#define                                 MolReader_witness_get_nth42(s)                  mol_slice_by_offset(s, 42, 1)
#define                                 MolReader_witness_get_nth43(s)                  mol_slice_by_offset(s, 43, 1)
#define                                 MolReader_witness_get_nth44(s)                  mol_slice_by_offset(s, 44, 1)
#define                                 MolReader_witness_get_nth45(s)                  mol_slice_by_offset(s, 45, 1)
#define                                 MolReader_witness_get_nth46(s)                  mol_slice_by_offset(s, 46, 1)
#define                                 MolReader_witness_get_nth47(s)                  mol_slice_by_offset(s, 47, 1)
#define                                 MolReader_witness_get_nth48(s)                  mol_slice_by_offset(s, 48, 1)
#define                                 MolReader_witness_get_nth49(s)                  mol_slice_by_offset(s, 49, 1)
#define                                 MolReader_witness_get_nth50(s)                  mol_slice_by_offset(s, 50, 1)
#define                                 MolReader_witness_get_nth51(s)                  mol_slice_by_offset(s, 51, 1)
#define                                 MolReader_witness_get_nth52(s)                  mol_slice_by_offset(s, 52, 1)
#define                                 MolReader_witness_get_nth53(s)                  mol_slice_by_offset(s, 53, 1)
#define                                 MolReader_witness_get_nth54(s)                  mol_slice_by_offset(s, 54, 1)
#define                                 MolReader_witness_get_nth55(s)                  mol_slice_by_offset(s, 55, 1)
#define                                 MolReader_witness_get_nth56(s)                  mol_slice_by_offset(s, 56, 1)
#define                                 MolReader_witness_get_nth57(s)                  mol_slice_by_offset(s, 57, 1)
#define                                 MolReader_witness_get_nth58(s)                  mol_slice_by_offset(s, 58, 1)
#define                                 MolReader_witness_get_nth59(s)                  mol_slice_by_offset(s, 59, 1)
#define                                 MolReader_witness_get_nth60(s)                  mol_slice_by_offset(s, 60, 1)
#define                                 MolReader_witness_get_nth61(s)                  mol_slice_by_offset(s, 61, 1)
#define                                 MolReader_witness_get_nth62(s)                  mol_slice_by_offset(s, 62, 1)
#define                                 MolReader_witness_get_nth63(s)                  mol_slice_by_offset(s, 63, 1)
#define                                 MolReader_witness_get_nth64(s)                  mol_slice_by_offset(s, 64, 1)
#define                                 MolReader_nfts_verify(s, c)                     mol_fixvec_verify(s, 20)
#define                                 MolReader_nfts_length(s)                        mol_fixvec_length(s)
#define                                 MolReader_nfts_get(s, i)                        mol_fixvec_slice_by_index(s, 20, i)
#define                                 MolReader_bytes_verify(s, c)                    mol_fixvec_verify(s, 1)
#define                                 MolReader_bytes_length(s)                       mol_fixvec_length(s)
#define                                 MolReader_bytes_get(s, i)                       mol_fixvec_slice_by_index(s, 1, i)
#define                                 MolReader_bytes_raw_bytes(s)                    mol_fixvec_slice_raw_bytes(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Operations_verify                     (const mol_seg_t*, bool);
#define                                 MolReader_Operations_length(s)                  mol_dynvec_length(s)
#define                                 MolReader_Operations_get(s, i)                  mol_dynvec_slice_by_index(s, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Round_verify                          (const mol_seg_t*, bool);
#define                                 MolReader_Round_actual_field_count(s)           mol_table_actual_field_count(s)
#define                                 MolReader_Round_has_extra_fields(s)             mol_table_has_extra_fields(s, 2)
#define                                 MolReader_Round_get_user_type(s)                mol_table_slice_by_index(s, 0)
#define                                 MolReader_Round_get_operations(s)               mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Args_verify                           (const mol_seg_t*, bool);
#define                                 MolReader_Args_actual_field_count(s)            mol_table_actual_field_count(s)
#define                                 MolReader_Args_has_extra_fields(s)              mol_table_has_extra_fields(s, 8)
#define                                 MolReader_Args_get_user_staking_ckb(s)          mol_table_slice_by_index(s, 0)
#define                                 MolReader_Args_get_user_deck_size(s)            mol_table_slice_by_index(s, 1)
#define                                 MolReader_Args_get_begin_blocknumber(s)         mol_table_slice_by_index(s, 2)
#define                                 MolReader_Args_get_lock_code_hash(s)            mol_table_slice_by_index(s, 3)
#define                                 MolReader_Args_get_user1_pkhash(s)              mol_table_slice_by_index(s, 4)
#define                                 MolReader_Args_get_user1_nfts(s)                mol_table_slice_by_index(s, 5)
#define                                 MolReader_Args_get_user2_pkhash(s)              mol_table_slice_by_index(s, 6)
#define                                 MolReader_Args_get_user2_nfts(s)                mol_table_slice_by_index(s, 7)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Challenge_verify                      (const mol_seg_t*, bool);
#define                                 MolReader_Challenge_actual_field_count(s)       mol_table_actual_field_count(s)
#define                                 MolReader_Challenge_has_extra_fields(s)         mol_table_has_extra_fields(s, 3)
#define                                 MolReader_Challenge_get_round_offset(s)         mol_table_slice_by_index(s, 0)
#define                                 MolReader_Challenge_get_signature(s)            mol_table_slice_by_index(s, 1)
#define                                 MolReader_Challenge_get_round(s)                mol_table_slice_by_index(s, 2)

/*
 * Builder APIs
 */

#define                                 MolBuilder_uint8_t_init(b)                      mol_builder_initialize_fixed_size(b, 1)
#define                                 MolBuilder_uint8_t_set_nth0(b, p)               mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_uint8_t_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_uint8_t_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_uint16_t_init(b)                     mol_builder_initialize_fixed_size(b, 2)
#define                                 MolBuilder_uint16_t_set_nth0(b, p)              mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_uint16_t_set_nth1(b, p)              mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_uint16_t_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_uint16_t_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_uint64_t_init(b)                     mol_builder_initialize_fixed_size(b, 8)
#define                                 MolBuilder_uint64_t_set_nth0(b, p)              mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_uint64_t_set_nth1(b, p)              mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_uint64_t_set_nth2(b, p)              mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_uint64_t_set_nth3(b, p)              mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_uint64_t_set_nth4(b, p)              mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_uint64_t_set_nth5(b, p)              mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_uint64_t_set_nth6(b, p)              mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_uint64_t_set_nth7(b, p)              mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_uint64_t_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_uint64_t_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_blake160_init(b)                     mol_builder_initialize_fixed_size(b, 20)
#define                                 MolBuilder_blake160_set_nth0(b, p)              mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_blake160_set_nth1(b, p)              mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_blake160_set_nth2(b, p)              mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_blake160_set_nth3(b, p)              mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_blake160_set_nth4(b, p)              mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_blake160_set_nth5(b, p)              mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_blake160_set_nth6(b, p)              mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_blake160_set_nth7(b, p)              mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_blake160_set_nth8(b, p)              mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_blake160_set_nth9(b, p)              mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_blake160_set_nth10(b, p)             mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_blake160_set_nth11(b, p)             mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_blake160_set_nth12(b, p)             mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_blake160_set_nth13(b, p)             mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_blake160_set_nth14(b, p)             mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_blake160_set_nth15(b, p)             mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_blake160_set_nth16(b, p)             mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_blake160_set_nth17(b, p)             mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_blake160_set_nth18(b, p)             mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_blake160_set_nth19(b, p)             mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_blake160_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_blake160_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_blake256_init(b)                     mol_builder_initialize_fixed_size(b, 32)
#define                                 MolBuilder_blake256_set_nth0(b, p)              mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_blake256_set_nth1(b, p)              mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_blake256_set_nth2(b, p)              mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_blake256_set_nth3(b, p)              mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_blake256_set_nth4(b, p)              mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_blake256_set_nth5(b, p)              mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_blake256_set_nth6(b, p)              mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_blake256_set_nth7(b, p)              mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_blake256_set_nth8(b, p)              mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_blake256_set_nth9(b, p)              mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_blake256_set_nth10(b, p)             mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_blake256_set_nth11(b, p)             mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_blake256_set_nth12(b, p)             mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_blake256_set_nth13(b, p)             mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_blake256_set_nth14(b, p)             mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_blake256_set_nth15(b, p)             mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_blake256_set_nth16(b, p)             mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_blake256_set_nth17(b, p)             mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_blake256_set_nth18(b, p)             mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_blake256_set_nth19(b, p)             mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_blake256_set_nth20(b, p)             mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_blake256_set_nth21(b, p)             mol_builder_set_byte_by_offset(b, 21, p)
#define                                 MolBuilder_blake256_set_nth22(b, p)             mol_builder_set_byte_by_offset(b, 22, p)
#define                                 MolBuilder_blake256_set_nth23(b, p)             mol_builder_set_byte_by_offset(b, 23, p)
#define                                 MolBuilder_blake256_set_nth24(b, p)             mol_builder_set_byte_by_offset(b, 24, p)
#define                                 MolBuilder_blake256_set_nth25(b, p)             mol_builder_set_byte_by_offset(b, 25, p)
#define                                 MolBuilder_blake256_set_nth26(b, p)             mol_builder_set_byte_by_offset(b, 26, p)
#define                                 MolBuilder_blake256_set_nth27(b, p)             mol_builder_set_byte_by_offset(b, 27, p)
#define                                 MolBuilder_blake256_set_nth28(b, p)             mol_builder_set_byte_by_offset(b, 28, p)
#define                                 MolBuilder_blake256_set_nth29(b, p)             mol_builder_set_byte_by_offset(b, 29, p)
#define                                 MolBuilder_blake256_set_nth30(b, p)             mol_builder_set_byte_by_offset(b, 30, p)
#define                                 MolBuilder_blake256_set_nth31(b, p)             mol_builder_set_byte_by_offset(b, 31, p)
#define                                 MolBuilder_blake256_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_blake256_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_witness_init(b)                      mol_builder_initialize_fixed_size(b, 65)
#define                                 MolBuilder_witness_set_nth0(b, p)               mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_witness_set_nth1(b, p)               mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_witness_set_nth2(b, p)               mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_witness_set_nth3(b, p)               mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_witness_set_nth4(b, p)               mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_witness_set_nth5(b, p)               mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_witness_set_nth6(b, p)               mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_witness_set_nth7(b, p)               mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_witness_set_nth8(b, p)               mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_witness_set_nth9(b, p)               mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_witness_set_nth10(b, p)              mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_witness_set_nth11(b, p)              mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_witness_set_nth12(b, p)              mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_witness_set_nth13(b, p)              mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_witness_set_nth14(b, p)              mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_witness_set_nth15(b, p)              mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_witness_set_nth16(b, p)              mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_witness_set_nth17(b, p)              mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_witness_set_nth18(b, p)              mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_witness_set_nth19(b, p)              mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_witness_set_nth20(b, p)              mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_witness_set_nth21(b, p)              mol_builder_set_byte_by_offset(b, 21, p)
#define                                 MolBuilder_witness_set_nth22(b, p)              mol_builder_set_byte_by_offset(b, 22, p)
#define                                 MolBuilder_witness_set_nth23(b, p)              mol_builder_set_byte_by_offset(b, 23, p)
#define                                 MolBuilder_witness_set_nth24(b, p)              mol_builder_set_byte_by_offset(b, 24, p)
#define                                 MolBuilder_witness_set_nth25(b, p)              mol_builder_set_byte_by_offset(b, 25, p)
#define                                 MolBuilder_witness_set_nth26(b, p)              mol_builder_set_byte_by_offset(b, 26, p)
#define                                 MolBuilder_witness_set_nth27(b, p)              mol_builder_set_byte_by_offset(b, 27, p)
#define                                 MolBuilder_witness_set_nth28(b, p)              mol_builder_set_byte_by_offset(b, 28, p)
#define                                 MolBuilder_witness_set_nth29(b, p)              mol_builder_set_byte_by_offset(b, 29, p)
#define                                 MolBuilder_witness_set_nth30(b, p)              mol_builder_set_byte_by_offset(b, 30, p)
#define                                 MolBuilder_witness_set_nth31(b, p)              mol_builder_set_byte_by_offset(b, 31, p)
#define                                 MolBuilder_witness_set_nth32(b, p)              mol_builder_set_byte_by_offset(b, 32, p)
#define                                 MolBuilder_witness_set_nth33(b, p)              mol_builder_set_byte_by_offset(b, 33, p)
#define                                 MolBuilder_witness_set_nth34(b, p)              mol_builder_set_byte_by_offset(b, 34, p)
#define                                 MolBuilder_witness_set_nth35(b, p)              mol_builder_set_byte_by_offset(b, 35, p)
#define                                 MolBuilder_witness_set_nth36(b, p)              mol_builder_set_byte_by_offset(b, 36, p)
#define                                 MolBuilder_witness_set_nth37(b, p)              mol_builder_set_byte_by_offset(b, 37, p)
#define                                 MolBuilder_witness_set_nth38(b, p)              mol_builder_set_byte_by_offset(b, 38, p)
#define                                 MolBuilder_witness_set_nth39(b, p)              mol_builder_set_byte_by_offset(b, 39, p)
#define                                 MolBuilder_witness_set_nth40(b, p)              mol_builder_set_byte_by_offset(b, 40, p)
#define                                 MolBuilder_witness_set_nth41(b, p)              mol_builder_set_byte_by_offset(b, 41, p)
#define                                 MolBuilder_witness_set_nth42(b, p)              mol_builder_set_byte_by_offset(b, 42, p)
#define                                 MolBuilder_witness_set_nth43(b, p)              mol_builder_set_byte_by_offset(b, 43, p)
#define                                 MolBuilder_witness_set_nth44(b, p)              mol_builder_set_byte_by_offset(b, 44, p)
#define                                 MolBuilder_witness_set_nth45(b, p)              mol_builder_set_byte_by_offset(b, 45, p)
#define                                 MolBuilder_witness_set_nth46(b, p)              mol_builder_set_byte_by_offset(b, 46, p)
#define                                 MolBuilder_witness_set_nth47(b, p)              mol_builder_set_byte_by_offset(b, 47, p)
#define                                 MolBuilder_witness_set_nth48(b, p)              mol_builder_set_byte_by_offset(b, 48, p)
#define                                 MolBuilder_witness_set_nth49(b, p)              mol_builder_set_byte_by_offset(b, 49, p)
#define                                 MolBuilder_witness_set_nth50(b, p)              mol_builder_set_byte_by_offset(b, 50, p)
#define                                 MolBuilder_witness_set_nth51(b, p)              mol_builder_set_byte_by_offset(b, 51, p)
#define                                 MolBuilder_witness_set_nth52(b, p)              mol_builder_set_byte_by_offset(b, 52, p)
#define                                 MolBuilder_witness_set_nth53(b, p)              mol_builder_set_byte_by_offset(b, 53, p)
#define                                 MolBuilder_witness_set_nth54(b, p)              mol_builder_set_byte_by_offset(b, 54, p)
#define                                 MolBuilder_witness_set_nth55(b, p)              mol_builder_set_byte_by_offset(b, 55, p)
#define                                 MolBuilder_witness_set_nth56(b, p)              mol_builder_set_byte_by_offset(b, 56, p)
#define                                 MolBuilder_witness_set_nth57(b, p)              mol_builder_set_byte_by_offset(b, 57, p)
#define                                 MolBuilder_witness_set_nth58(b, p)              mol_builder_set_byte_by_offset(b, 58, p)
#define                                 MolBuilder_witness_set_nth59(b, p)              mol_builder_set_byte_by_offset(b, 59, p)
#define                                 MolBuilder_witness_set_nth60(b, p)              mol_builder_set_byte_by_offset(b, 60, p)
#define                                 MolBuilder_witness_set_nth61(b, p)              mol_builder_set_byte_by_offset(b, 61, p)
#define                                 MolBuilder_witness_set_nth62(b, p)              mol_builder_set_byte_by_offset(b, 62, p)
#define                                 MolBuilder_witness_set_nth63(b, p)              mol_builder_set_byte_by_offset(b, 63, p)
#define                                 MolBuilder_witness_set_nth64(b, p)              mol_builder_set_byte_by_offset(b, 64, p)
#define                                 MolBuilder_witness_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_witness_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_nfts_init(b)                         mol_fixvec_builder_initialize(b, 512)
#define                                 MolBuilder_nfts_push(b, p)                      mol_fixvec_builder_push(b, p, 20)
#define                                 MolBuilder_nfts_build(b)                        mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_nfts_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_bytes_init(b)                        mol_fixvec_builder_initialize(b, 16)
#define                                 MolBuilder_bytes_push(b, p)                     mol_fixvec_builder_push_byte(b, p)
#define                                 MolBuilder_bytes_build(b)                       mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_bytes_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Operations_init(b)                   mol_builder_initialize_with_capacity(b, 64, 64)
#define                                 MolBuilder_Operations_push(b, p, l)             mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_Operations_build(b)                  mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_Operations_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_Round_init(b)                        mol_table_builder_initialize(b, 128, 2)
#define                                 MolBuilder_Round_set_user_type(b, p, l)         mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Round_set_operations(b, p, l)        mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Round_build                          (mol_builder_t);
#define                                 MolBuilder_Round_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Args_init(b)                         mol_table_builder_initialize(b, 1024, 8)
#define                                 MolBuilder_Args_set_user_staking_ckb(b, p, l)   mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Args_set_user_deck_size(b, p, l)     mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_Args_set_begin_blocknumber(b, p, l)  mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_Args_set_lock_code_hash(b, p, l)     mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_Args_set_user1_pkhash(b, p, l)       mol_table_builder_add(b, 4, p, l)
#define                                 MolBuilder_Args_set_user1_nfts(b, p, l)         mol_table_builder_add(b, 5, p, l)
#define                                 MolBuilder_Args_set_user2_pkhash(b, p, l)       mol_table_builder_add(b, 6, p, l)
#define                                 MolBuilder_Args_set_user2_nfts(b, p, l)         mol_table_builder_add(b, 7, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Args_build                           (mol_builder_t);
#define                                 MolBuilder_Args_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_Challenge_init(b)                    mol_table_builder_initialize(b, 512, 3)
#define                                 MolBuilder_Challenge_set_round_offset(b, p, l)  mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Challenge_set_signature(b, p, l)     mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_Challenge_set_round(b, p, l)         mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Challenge_build                      (mol_builder_t);
#define                                 MolBuilder_Challenge_clear(b)                   mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_uint8_t[1]       =  {____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_uint16_t[2]      =  {____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_uint64_t[8]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_blake160[20]     =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_blake256[32]     =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_witness[65]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_nfts[4]          =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_bytes[4]         =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Operations[4]    =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Round[17]        =  {
    0x11, ____, ____, ____, 0x0c, ____, ____, ____, 0x0d, ____, ____, ____,
    ____, 0x04, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Args[133]        =  {
    0x85, ____, ____, ____, 0x24, ____, ____, ____, 0x2c, ____, ____, ____,
    0x2d, ____, ____, ____, 0x35, ____, ____, ____, 0x55, ____, ____, ____,
    0x69, ____, ____, ____, 0x6d, ____, ____, ____, 0x81, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Challenge[99]    =  {
    0x63, ____, ____, ____, 0x10, ____, ____, ____, 0x11, ____, ____, ____,
    0x52, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, 0x11, ____,
    ____, ____, 0x0c, ____, ____, ____, 0x0d, ____, ____, ____, ____, 0x04,
    ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_Operations_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_bytes_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_Round_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_uint8_t_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Operations_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Args_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 8) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 8) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_uint64_t_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_uint8_t_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_uint64_t_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_blake256_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[4];
        inner.size = offsets[5] - offsets[4];
        errno = MolReader_blake160_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[5];
        inner.size = offsets[6] - offsets[5];
        errno = MolReader_nfts_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[6];
        inner.size = offsets[7] - offsets[6];
        errno = MolReader_blake160_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[7];
        inner.size = offsets[8] - offsets[7];
        errno = MolReader_nfts_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Challenge_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_uint8_t_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_witness_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Round_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Round_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 1 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 1 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 1;
        memcpy(dst, &MolDefault_uint8_t, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Operations, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Args_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 36;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 8 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 1 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 8 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 20 : len;
    len = builder.number_ptr[11];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[13];
    res.seg.size += len == 0 ? 20 : len;
    len = builder.number_ptr[15];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 8 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 1 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 8 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 20 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[11];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[13];
    offset += len == 0 ? 20 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[15];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 8;
        memcpy(dst, &MolDefault_uint64_t, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 1;
        memcpy(dst, &MolDefault_uint8_t, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 8;
        memcpy(dst, &MolDefault_uint64_t, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_blake256, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 20;
        memcpy(dst, &MolDefault_blake160, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[11];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_nfts, len);
    } else {
        mol_num_t of = builder.number_ptr[10];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[13];
    if (len == 0) {
        len = 20;
        memcpy(dst, &MolDefault_blake160, len);
    } else {
        mol_num_t of = builder.number_ptr[12];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[15];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_nfts, len);
    } else {
        mol_num_t of = builder.number_ptr[14];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Challenge_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 1 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 65 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 17 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 1 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 65 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 17 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 1;
        memcpy(dst, &MolDefault_uint8_t, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 65;
        memcpy(dst, &MolDefault_witness, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 17;
        memcpy(dst, &MolDefault_Round, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_KABLETOP
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_KABLETOP
#endif /* __DEFINE_MOLECULE_API_DECORATOR_KABLETOP */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* KABLETOP_H */
